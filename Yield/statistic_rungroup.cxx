#include "ROOT/RDataFrame.hxx"
#include "TChain.h"
#include <string>
#include <iostream>
#include <fstream>
#include <array>
#include <vector>
#include "nlohmann/json.hpp"
using json = nlohmann::json;

//this one runs after statistic_runs.cxx. Read the json generated by statistic_runs.cxx and build another json in order of kinematics
void statistic_rungroup(){

  //if(Rungroup ==0){
  //  std::cout<<"Enter a Rungroup (-1 to exit):";
  //  std::cin>>Rungroup;
  //  if(Rungroup<=0)
  //    return;
  //}

  json j_runs;
  {
    std::ifstream runs("db2/ratio_run_group_updated.json");
    runs>>j_runs;
  }
  json j_info;
  {
    std::ifstream info("results/yield/run_entries.json");
    info>>j_info;
  }
  json j_out;
  {
    std::ifstream out("results/rungroup_list.json");
    out>>j_out;
  }
  for(json::iterator ik = j_runs.begin();ik != j_runs.end();++ik){
    int Rungroup = std::stoi(ik.key());
    std::vector<int> neg_runs_D2 = j_runs[std::to_string(Rungroup)]["neg"]["D2"].get<std::vector<int>>();
    std::vector<int> pos_runs_D2 = j_runs[std::to_string(Rungroup)]["pos"]["D2"].get<std::vector<int>>();
    std::vector<int> neg_runs_H2 = j_runs[std::to_string(Rungroup)]["neg"]["H2"].get<std::vector<int>>();
    std::vector<int> pos_runs_H2 = j_runs[std::to_string(Rungroup)]["pos"]["H2"].get<std::vector<int>>();
    std::vector<int> neg_runs_Dummy = j_runs[std::to_string(Rungroup)]["neg"]["Dummy"].get<std::vector<int>>();
    std::vector<int> pos_runs_Dummy = j_runs[std::to_string(Rungroup)]["pos"]["Dummy"].get<std::vector<int>>();
    double neg_counts_D2=0,pos_counts_D2=0,neg_counts_H2=0,pos_counts_H2=0,neg_counts_Dummy=0,pos_counts_Dummy=0;
    if(!neg_runs_D2.empty()){
      for(std::vector<int>::iterator it = neg_runs_D2.begin();it!= neg_runs_D2.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        neg_counts_D2 += counts;
      }
    }
    if(!pos_runs_D2.empty()){
      for(std::vector<int>::iterator it = pos_runs_D2.begin();it!= pos_runs_D2.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        pos_counts_D2 += counts;
      }
    }
    if(!neg_runs_H2.empty()){
      for(std::vector<int>::iterator it = neg_runs_H2.begin();it!= neg_runs_H2.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        neg_counts_H2 += counts;
      }
    }
    if(!pos_runs_H2.empty()){
      for(std::vector<int>::iterator it = pos_runs_H2.begin();it!= pos_runs_H2.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        pos_counts_H2 += counts;
      }
    }
    if(!neg_runs_Dummy.empty()){
      for(std::vector<int>::iterator it = neg_runs_Dummy.begin();it!= neg_runs_Dummy.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        neg_counts_Dummy += counts;
      }
    }
    if(!pos_runs_Dummy.empty()){
      for(std::vector<int>::iterator it = pos_runs_Dummy.begin();it!= pos_runs_Dummy.end();++it){
        int RunNumber = *it;
        int counts = j_info[(std::to_string(RunNumber)).c_str()]["nentries"].get<int>();
        pos_counts_Dummy += counts;
      }
    }
  j_out[std::to_string(Rungroup)]["neg"]["D2"]["counts"] = neg_counts_D2; 
  j_out[std::to_string(Rungroup)]["pos"]["D2"]["counts"] = pos_counts_D2; 
  j_out[std::to_string(Rungroup)]["neg"]["H2"]["counts"] = neg_counts_H2; 
  j_out[std::to_string(Rungroup)]["pos"]["H2"]["counts"] = pos_counts_H2; 
  j_out[std::to_string(Rungroup)]["neg"]["Dummy"]["counts"] = neg_counts_Dummy; 
  j_out[std::to_string(Rungroup)]["pos"]["Dummy"]["counts"] = pos_counts_Dummy; 
  }
  std::ofstream outfile("results/rungroup_list.json");
  outfile<<j_out.dump(4)<<std::endl;
}
